geom_smooth(method = "lm")
ggplot(data = ChickWeight,
aes(weight)) +
geom_density() +
facet_grid(. ~ Diet)
summary(ChickWeight)
aggregate(ChickWeight, weight ~ Diet, fun = max)
aggregate(ChickWeight, weight ~ Diet, FUN = max)
aggregate(ChickWeight, by = list(weight, Diet), FUN = max)
aggregate(ChickWeight, by = list(ChickWeight$weight, ChickWeight$Diet), FUN = max)
aggregate(ChickWeight, by = list(ChickWeight$weight), FUN = max)
library(ggplot, dplyr)
library(ggplot2, dplyr)
?group_by
summarise()
library(dplyr)
library(dplyr); library(ggplot2)
summarise()
ChickWeight %>%
group_by(Diet)
x <- ChickWeight %>% group_by(Diet)
x
x <- ChickWeight %>% group_by(Diet, Chick)
x
summarise(x, mean)
summarise(x, count = n())
summarise(x, count = n(), max = max)
summarise(x, count = n(), max = max())
summarise(x, count = n(), max = max(weight))
x <- summarise(x, count = n(), max = max(weight))
x
View(x)
x <- ChickWeight %>% group_by(Diet)
x <- summarise(x, count = n(), max = max(weight))
View(x)
x <- ChickWeight %>% group_by(Diet)
x <- summarise(x, count = n_distinct(), max = max(weight))
x <- summarise(x, count = n_distinct(Chick), max = max(weight))
View(x)
x
x <- ChickWeight %>% group_by(Diet)
x
summarise(x, count = n())
summarise(x, count = n(), n_distinct(Chick))
summarise(x, count = n(), n_distinct(Chick), range())
summarise(x, count = n(), n_distinct(Chick), range(weight))
summarise(x, count = n(), n_distinct(Chick), range(weight))
summarise(x, count = n(), n_distinct(Chick), mean(weight))
summarise(x, count = n(), n_distinct(Chick), mean(weight), median(weight))
ggplot(data = ChickWeight,
aes(weight)) +
geom_density() +
facet_grid(. ~ Diet)
ggplot(data = subset(ChickWeight, ChickWeight$Diet %in% c(3, 4)),
aes(weight)) +
geom_density() +
facet_grid(. ~ Diet)
ggplot(data = ChickWeight[ChickWeight$Diet == 3],
aes(weight)) +
geom_density() +
facet_grid(. ~ Diet)
ggplot(data = ChickWeight[ChickWeight$Diet == 3],
aes(weight)) +
geom_density() +
facet_grid(. ~ Diet)
ggplot(data = ChickWeight[ChickWeight$Diet == 3, ],
aes(weight)) +
geom_density() +
facet_grid(. ~ Diet)
ggplot(data = ChickWeight[ChickWeight$Diet %in% c(3, 4), ],
aes(weight)) +
geom_density() +
facet_grid(. ~ Diet)
ggplot(data = ChickWeight,
aes(Time, weight)) +
geom_point() +
facet_grid(. ~ Diet) +
geom_smooth(method = "lm")
ggplot(data = ChickWeight,
aes(weight)) +
geom_density() +
facet_grid(. ~ Diet)
ggplot(data = ChickWeight,
aes(weight)) +
geom_density() +
facet_grid(. ~ Diet)
ggplot(data = ChickWeight,
aes(Time, weight)) +
geom_point() +
facet_grid(. ~ Diet) +
geom_smooth(method = "lm")
x <- ChickWeight %>% group_by(Diet)
x
ggplot(x)
ggplot(data = x, aes(Time, Weight)) + geom_density()
ggplot(data = x, aes(Time, weight)) + geom_density()
ggplot(data = x, aes(Time, weight)) + geom_density()
x
ggplot(data = x, aes(Time, weight)) + geom_density()
x
x
ggplot(data = x, aes(Time, weight)) + geom_point()
ggplot(data = x, aes(Time, weight)) + geom_point() + facet_grid(. ~ Diet)
ggplot(data = x, aes(Time, weight)) + geom_point() + facet_grid(. ~ Diet)
library(ggplot2)
airquality$Month <- factor(airquality$Month)
ggplot(airquality, aes(Ozone, Temp)) + geom_point( color = "steelblue", size = 5, alpha = 0.5) + facet_grid(. ~ Month)
ggplot(airquality, aes(Ozone, Temp)) + geom_point( color = "steelblue", size = 5, alpha = 0.5) + facet_grid(. ~ Month) + geom_smooth(method = "lm")
install.packages("ggplot2")
str(airquality)
rm(airquality)
str(airquality)
ggplot(airquality, ## Dataset is the airquality one that comes with R
aes(Ozone, Temp)) + ## Here we specift that we'll be showing Ozone on the x-axis and Temperature on the y-axis
geom_point( color = "steelblue", size = 4, alpha = 0.5) +
facet_grid(. ~ Month) +
geom_smooth(method = "lm")
ggplot(airquality, ## Dataset is the airquality one that comes with R
aes(Ozone, Temp)) + ## Here we specift that we'll be showing Ozone on the x-axis and Temperature on the y-axis
geom_point( color = "steelblue", size = 5, alpha = 0.5) +
facet_grid(. ~ Month) +
geom_smooth(method = "lm")
ggplot(data = airquality, aes(Temp)) + geom_density(aes(color = Month))
ggplot(data = airquality, aes(Temp)) + geom_density(aes(color = factor(Month)))
ggplot(data = airquality, aes(Temp)) + geom_density() + facet_grid(. ~ factor(Month))
ggplot(data = airquality, aes(Temp)) + geom_density() + facet_grid(. ~ factor(Month))
ggplot(data = airquality, aes(Temp)) + geom_density() + facet_grid(factor(Month) ~ .)
ggplot(data = airquality, aes(Temp)) + geom_density()
ggplot(data = airquality, aes(Temp)) + geom_density() + facet_grid(. ~ Month)
rm(airquality)
airquality$Month <- factor(airquality$Month)
str(airquality)
ggplot(data = airquality, aes(Temp)) + geom_density() + facet_grid(. ~ Month)
ggplot(data = airquality, aes(Temp)) + geom_density(aes(color = factor(Month)))
ggplot(data = airquality, aes(Temp)) + geom_density() + facet_grid(. ~ factor(Month))
ggplot(data = airquality, aes(Temp)) + geom_density() + facet_grid(. ~ as.factor(Month))
ggplot(data = airquality, aes(Temp)) + geom_density() + facet_grid(. ~ Month)
ggplot(data = airquality, aes(Temp)) + geom_density(aes(color = factor(Month)))
ggplot(data = airquality, aes(Temp)) + geom_density(aes(color = Month))
ggplot(data = iris, aes(Sepal.Length, Sepal.Width)) + geom_point() + geom_smooth(method = "lm")
ggplot(data = iris, aes(Sepal.Length, Sepal.Width), col(Species)) + geom_point() + geom_smooth(method = "lm")
ggplot(data = iris, aes(Sepal.Length, Sepal.Width), col(factor(Species))) + geom_point() + geom_smooth(method = "lm")
ggplot(data = iris, aes(Sepal.Length, Sepal.Width), colour = (factor(Species))) + geom_point() + geom_smooth(method = "lm")
ggplot(data = iris, aes(Sepal.Length, Sepal.Width), colour = (Species)) + geom_point() + geom_smooth(method = "lm")
ggplot(data = iris, aes(Sepal.Length, Sepal.Width)) + geom_point(aes(colour = (Species))) + geom_smooth(method = "lm")
airquality
airquality[, c(1, 4)]
airquality[, c(1, 4, 5)]
complete.cases(airquality)
airquality(complete.cases(airquality))
airquality[complete.cases(airquality)]
airquality[complete.cases(airquality), ]
is.na(airquality)
airquality[!is.na(airquality), ]
airquality[!is.na(airquality), ]
airquality[is.na(airquality), ]
airquality[is.na(airquality), ]
airquality <- airquality[complete.cases(airquality), ]
library(plyr);
library(dplyr);
library(reshape);
scrobbles <- read.delim("Users/stuart/Dropbox/STUART/R/2015-01-15 Last.fm/scrobbles_2015-05-31.tsv", stringsAsFactors = TRUE)
# Load in scrobble data
scrobbles <- read.delim("Users/stuart/Dropbox/STUART/R/2015-01-15 Last.fm correlation/scrobbles_2015-05-31.tsv", stringsAsFactors = TRUE)
# Load in scrobble data
scrobbles <- read.delim("/Users/stuart/Dropbox/STUART/R/2015-01-15 Last.fm correlation/scrobbles_2015-05-31.tsv", stringsAsFactors = TRUE)
# Load in scrobble data
scrobbles <- read.delim("/Users/stuart/Dropbox/STUART/R/2015-01-15 Last.fm correlation/data/scrobbles_2015-05-31.tsv", stringsAsFactors = TRUE)
# Retain only the variables of interest
scrobbles <- scrobbles[ , c(1, 3, 5, 11 )]
View(scrobbles)
# Put time in the correct format
scrobbles$ISO.time <- as.POSIXct(scrobbles$ISO.time)
View(scrobbles)
scrobbles$month.and.year <- format(scrobbles$ISO.time, format = "%Y %m")
str(scrobbles)
t2 <- scrobbles %>%
group_by(artist.name) %>%
summarise(tot = length(ISO.time)) %>%
filter(tot >= 400)
View(t2)
match_df <- match_df(scrobbles, t2)
View(match_df)
table(match_df$artist_name)
View(match_df)
table(match_df$artist.name)
t4 <- as.data.frame.matrix(table(match_df$month.and.year, match_df$artist.name))
View(t4)
artists.to.keep <- t2$artist.name
t4 <- t4[, artists.to.keep]
View(t4)
cor.matrix <- data.frame(cor(t4))
View(cor.matrix)
cor.matrix$artist.name <- row.names(cor.matrix)
View(cor.matrix)
melted.corr.matrix <- melt(cor.matrix)
library(reshape);
install.packages("reshape")
library(reshape);
melted.corr.matrix <- melt(cor.matrix)
View(melted.corr.matrix)
cor.test(t4$Edan, t4$`Mr. Lif`)
subset(melted.corr.matrix, melted.corr.matrix$value > 1)
subset(melted.corr.matrix, melted.corr.matrix$value >= 0.7 & value != 1)
plot(t4$...And.You.Will.Know.Us.by.the.Trail.of.Dead), t1$artist.name == "Someone Still Loves You Boris Yeltsin")
plot(log(t4$`Autechre`), log(t4$`Tortoise`))
scatterplot( subset(t1, t1$artist.name)
x <- c(0, 0, 1, 0, 0, 0)
y <- c(0, 0, 5, 0, 0, 0)
cor.test(x,y)
x <- c(0, 0, 1, 0, 0, 0)
y <- c(0, 0, 5, 0, 0, 0)
cor.test(x,y)
# Read in data
all.data <- read.csv("activity.csv", sep = ",", header = T);
# Calculate total number of steps per day
total.steps.per.day <- setNames(aggregate(all.data$steps, list(all.data$date), FUN = sum, na.rm = T), c("date", "steps"))
# Histogram of steps per day
hist(total.steps.per.day$steps)
# Median number of steps per day
median(total.steps.per.day$steps);
# Mean number of steps per day
mean(total.steps.per.day$steps);
# Average daily activity pattern
# Calculate total number of steps per day
average.steps.by.interval <- setNames(aggregate(all.data$steps, list(all.data$interval), FUN = mean, na.rm = T), c("interval", "steps"))
# Time series of interval against average number of steps
plot(x = average.steps.by.interval$interval, y = average.steps.by.interval$steps, type = "l")
# Interval with the largest average number of steps
average.steps.by.interval[which.max(average.steps.by.interval$steps), ]
# Imputing missing values
# Count number of missing values
sum(is.na(all.data$steps))
# Fill in the missing values with the mean for that interval
head(average.steps.by.interval, 10)
na.subset <- subset(all.data, is.na(all.data$steps))
all.data <- read.csv("activity.csv", sep = ",", header = T);
# Calculate total number of steps per day
total.steps.per.day <- setNames(aggregate(all.data$steps, list(all.data$date), FUN = sum, na.rm = T), c("date", "steps"))
setwd("~/Dropbox/STUART/R/2015-06-04 Reproducible Research Assignment 1")
# Read in data
all.data <- read.csv("activity.csv", sep = ",", header = T);
# Calculate total number of steps per day
total.steps.per.day <- setNames(aggregate(all.data$steps, list(all.data$date), FUN = sum, na.rm = T), c("date", "steps"))
# Histogram of steps per day
hist(total.steps.per.day$steps)
# Median number of steps per day
median(total.steps.per.day$steps);
# Mean number of steps per day
mean(total.steps.per.day$steps);
# Average daily activity pattern
# Calculate total number of steps per day
average.steps.by.interval <- setNames(aggregate(all.data$steps, list(all.data$interval), FUN = mean, na.rm = T), c("interval", "steps"))
# Time series of interval against average number of steps
plot(x = average.steps.by.interval$interval, y = average.steps.by.interval$steps, type = "l")
# Interval with the largest average number of steps
average.steps.by.interval[which.max(average.steps.by.interval$steps), ]
# Imputing missing values
# Count number of missing values
sum(is.na(all.data$steps))
# Fill in the missing values with the mean for that interval
head(average.steps.by.interval, 10)
na.subset <- subset(all.data, is.na(all.data$steps))
for (i in na.subset)
{ na.subset[all.data$interval == i] <- average.steps.by.interval$steps[average.steps.by.interval$interval == i] }
all.data$steps
head(all.data)
merge(all.data, average.steps.by.interval, by = "interval")
x <- merge(all.data, average.steps.by.interval, by = "interval")
head(x)
head(x, 100)
x[x$interval == "0",]
mean(x[x$interval == "0",])
mean(as.numeric((x[x$interval == "0",]))
mean(as.numeric((x[x$interval == "0",])))
class(as.numeric((x[x$interval == "0",])))
x <- merge(all.data, average.steps.by.interval, by = "interval")
View(x)
average.steps.by.interval
View(x)
for (i in na.subset)
{ na.subset[all.data$interval == i] <- average.steps.by.interval$steps[average.steps.by.interval$interval == i] }
for (i in nrow(na.subset))
{ na.subset[all.data$interval == i] <- average.steps.by.interval$steps[average.steps.by.interval$interval == i] }
for (i in nrow(na.subset))
for (i in nrow(na.subset))
{ na.subset[all.data$interval == i] <- average.steps.by.interval$steps[average.steps.by.interval$interval == i] }
na.subset
table(all.data$steps)
table(all.data$steps, all.data$interval)
is.na(all.data$steps)
sum(is.na(all.data$steps))
sum(is.na(subset(all.data$steps, all.data$interval == "0")))
subset(x, x$interval == "0")
x[is.na(x$steps.x)]
x[is.na(x$steps.x), ]
x[is.na(x$steps.x) & x$interval == "0", ]
x$steps.x[is.na(x$steps.x) & x$interval == "0", ]
x$steps.x[is.na(x$steps.x) & x$interval == "0"]
x$steps.x[is.na(x$steps.x) & x$interval == "0"] <- x$steps.y
x$steps.x[is.na(x$steps.x) & x$interval == "0"] <- x$steps.y[is.na(x$steps.x) & x$interval == "0"]
subset(x, x$interval == "0")
for (i in nrow(na.subset)) { print(i) }
for (i in 1:nrow(na.subset)) { print(i) }
for (i in na.subset) { print(i) }
for (i in 1:nrow(na.subset)) { print(i) }
for (i in 1:na.subset) { print(i) }
for (i in na.subset) { print(i) }
x <- 1:10
y <- runif(1, 100)
y <- runif(100)
y
y <- rbinom(100, 2)
y <- rbinom(100, prob = c(0.5, 0.5))
y <- rbinom(100, 50, prob = c(0.5, 0.5))
y
x <- rbinom(100, 50, prob = c(0.5, 0.5))
x
match(x, y)
ifelse(x > 30, print("t"), print("f"))
ifelse(x > 30, 1, 0)
ifelse(x > 21, 1, 0)
head(all.data)
all.data$uid <- paste(all.data$date, all.data$interval)
head(all.data)
all.data$uid <- paste(all.data$date, all.data$interval, sep = "_")
head(all.data)
all.data$uid <- paste(all.data$date, all.data$interval, sep = "-")
head(all.data)
average.steps.by.interval$uid <- paste(average.steps.by.interval$date, average.steps.by.interval$interval, sep = "-")
head(average.steps.by.interval)
ifelse(is.na(all.data$steps), match(all.data$interval, average.steps.by.interval$interval))
match(all.data$interval, average.steps.by.interval$interval
match(all.data$interval, average.steps.by.interval$interval)
match(all.data$interval, average.steps.by.interval$interval)
ifelse(
is.na(all.data$steps),
average.steps.by.interval[match(all.data$interval, average.steps.by.interval$interval), ],
all.data$steps)
average.steps.by.interval[match(all.data$interval, average.steps.by.interval$interval), ]
x <- ifelse(
is.na(all.data$steps),
average.steps.by.interval[match(all.data$interval, average.steps.by.interval$interval), ],
all.data$steps)
head(x)
as.data.frame(x)
x <- merge(all.data, average.steps.by.interval, by = "interval")
sum(is.na(subset(all.data$steps, all.data$interval == "0")))
sum(is.na(subset(all.data$steps, all.data$interval == "0")))
subset(x, x$interval == "0")
ifelse(is.na(x$steps.x), steps.x <- steps.y, steps.x)
ifelse(is.na(x$steps.x), x$steps.x <- x$steps.y, x$steps.x)
x <- ifelse(is.na(x$steps.x), x$steps.x <- x$steps.y, x$steps.x)
subset(x, x$interval == "0")
x <- merge(all.data, average.steps.by.interval, by = "interval")
x$steps.x <- ifelse(is.na(x$steps.x), x$steps.x <- x$steps.y, x$steps.x)
subset(x, x$interval == "0")
sum(is.na(subset(all.data$steps, all.data$interval == "0")))
is.na(x$steps.x)
sum(is.na(x$steps.x))
head(x)
subset(x, x$interval == "5")
ifelse(is.na(x$steps.x), x$steps.x <- x$steps.y, x$steps.x)
subset(x, x$interval == "10")
x <- merge(all.data, average.steps.by.interval, by = "interval")
y$steps.x <- ifelse(is.na(x$steps.x), x$steps.x <- x$steps.y, x$steps.x)
x <- merge(all.data, average.steps.by.interval, by = "interval")
y <- x
y$steps.x <- ifelse(is.na(x$steps.x), x$steps.x <- x$steps.y, x$steps.x)
head(x); head(y);
x <- merge(all.data, average.steps.by.interval, by = "interval")
head(x)
y <- x
y$steps.x <- ifelse(is.na(x$steps.x), x$steps.x <- x$steps.y, x$steps.x)
head(x); head(y);
x <- merge(all.data, average.steps.by.interval, by = "interval")
y <- x
y$steps.x <- ifelse(is.na(x$steps.x), y$steps.x <- y$steps.y, y$steps.x)
head(x); head(y);
x <- merge(all.data, average.steps.by.interval, by = "interval")
y <- x
y$steps.x <- ifelse(is.na(y$steps.x), y$steps.x <- y$steps.y, y$steps.x <- "test")
head(x); head(y);
x <- merge(all.data, average.steps.by.interval, by = "interval")
y <- x
y$steps.x <- ifelse(is.na(y$steps.x), y$steps.x <- y$steps.y, y$steps.x <- y$steps.x)
head(x); head(y);
x <- merge(all.data, average.steps.by.interval, by = "interval")
# sum(is.na(subset(all.data$steps, all.data$interval == "0")))
# head(x)
# subset(x, x$interval == "10")
y <- x
y$steps.x <- ifelse(is.na(y$steps.x), y$steps.x <- y$steps.y, y$steps.x <- "testsasad")
head(x); head(y);
str(x); str(y)
x <- merge(all.data, average.steps.by.interval, by = "interval")
y <- x
x
head(x); head(y);
x <- merge(all.data, average.steps.by.interval, by = "interval")
y <- x
y$steps.x <- ifelse(is.na(y$steps.x), y$steps.x <- y$steps.y, y$steps.x)
head(x); head(y);
head(y, 100)
x <- merge(all.data, average.steps.by.interval, by = "interval")
y <- x
y$steps.x <- if(is.na(y$steps.x)  { y$steps.x <- y$steps.y } else { y$steps.x }
head(x); head(y, 100);
head(x); head(y);
x <- merge(all.data, average.steps.by.interval, by = "interval")
y <- x
for (i in 1:y) { print i}
for (i in 1:y) { print(i)}
for (i in 1:y) print(i)
for (i in 1:nrow(y)) print(i)
sapply(y, y$steps)
sapply(y, head(y))
sapply(y, head)
ifelse(is.na(y$steps.x), y$steps.x <- y$steps.y, y$steps.x)
head(ifelse(is.na(y$steps.x), y$steps.x <- y$steps.y, y$steps.x))
for (i in 1:nrow(y))
if(is.na(y$steps.x[i]), y$steps.y)
for (i in 1:nrow(y))
if(is.na(y$steps.x[i]) y$steps.y)
for (i in 1:nrow(y))
if(is.na(y$steps.x[i]) y$steps.x <- y$steps.y)
for (i in 1:nrow(y))
if(is.na(y$steps.x[i]) y$steps.x <- y$steps.y[i])
for (i in 1:nrow(y))
if(is.na(y$steps.x[i, ]) y$steps.x <- y$steps.y[i])
for (i in 1:nrow(y))
{ if(is.na(y$steps.x[i, ]) y$steps.x <- y$steps.y[i]) }
for (i in 1:nrow(y))
if(is.na(y$steps.x) y$steps.x <- y$steps.y[i]) }
for (i in 1:nrow(y)) {
if(is.na(y$steps.x)) y$steps.x <- y$steps.y }
warnings()
head(x); head(y);
y$steps.x[1, ]
x <- merge(all.data, average.steps.by.interval, by = "interval")
y <- x
for (i in 1:nrow(y)) {
if(is.na(y$steps.x[i])) y$steps.x[i] <- y$steps.y[i] }
head(x); head(y);
head(y, 100)
head(average.steps.by.interval, 10)
# Read in data
all.data <- read.csv("activity.csv", sep = ",", header = T);
# Calculate total number of steps per day
total.steps.per.day <- setNames(aggregate(all.data$steps, list(all.data$date), FUN = sum, na.rm = T), c("date", "steps"))
# Histogram of steps per day
hist(total.steps.per.day$steps)
# Median number of steps per day
median(total.steps.per.day$steps);
# Mean number of steps per day
mean(total.steps.per.day$steps);
# Average daily activity pattern
# Calculate total number of steps per day
average.steps.by.interval <- setNames(aggregate(all.data$steps, list(all.data$interval), FUN = mean, na.rm = T), c("interval", "steps"))
# Time series of interval against average number of steps
plot(x = average.steps.by.interval$interval, y = average.steps.by.interval$steps, type = "l")
# Interval with the largest average number of steps
average.steps.by.interval[which.max(average.steps.by.interval$steps), ]
# Imputing missing values
# Count number of missing values
sum(is.na(all.data$steps))
# Fill in the missing values with the mean for that interval
head(average.steps.by.interval, 10)
# http://stackoverflow.com/questions/19750708/r-data-frame-fill-in-missing-values-based-on-others
# http://stackoverflow.com/questions/23396279/when-trying-to-replace-values-missing-values-are-not-allowed-in-subscripted-as
# for (i in nrow(na.subset))
# { na.subset[all.data$interval == i] <- average.steps.by.interval$steps[average.steps.by.interval$interval == i] }
x <- merge(all.data, average.steps.by.interval, by = "interval")
for (i in 1:nrow(x)) {
if(is.na(x$steps.x[i])) x$steps.x[i] <- x$steps.y[i] }
head(x, 100)
sum(is.na(all.data$steps))
sum(is.na(x$steps))
sum(is.na(x$steps.x))
head(x, 100)
?merge
all.data.imputed <- merge(all.data, average.steps.by.interval, by = "interval")
for (i in 1:nrow(all.data.imputed)) {
if(is.na(all.data.imputed$steps.x[i])) all.data.imputed$steps.x[i] <- all.data.imputed$steps.y[i] }
head(all.data.imputed, 100)
head(all.data.imputed, 10)
sum(is.na(all.data.imputed$steps.x))
subset(all.data.imputed, all.data.imputed$interval == "15")
subset(all.data.imputed, all.data.imputed$interval == "200")
subset(all.data, all.data$interval == "200")
subset(average.steps.by.interval, average.steps.by.interval$interval == "200")
subset(all.data.imputed, all.data.imputed$interval == "200")
all.data.imputed[1:3, ]
all.data.imputed[, 1:3]
all.data.imputed[1:10, 1:3]
all.data.imputed[1:100, 1:3]
all.data.imputed[1:100, 1:3]
names(all.data.imputed[2])
names(all.data.imputed[2]) <- "steps"
head(all.data.imputed)
names(all.data.imputed[2]) <- "steps"
head(all.data.imputed)
names(all.data.imputed)
all.data.imputed[1:100, 1:3]
names(all.data.imputed)[2] <- "steps"
names(all.data.imputed)
all.data.imputed <- all.data.imputed[ , 1:3]
names(all.data.imputed)[2] <- "steps"
names(all.data.imputed)
head(all.data.imputed)
hist(all.data$steps); hist(all.data.imputed$steps)
summary(all.data$steps); summary(all.data.imputed$steps)
